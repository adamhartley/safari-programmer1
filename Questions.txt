Q1) Which are valid?

a) doStuff() {
     var x; // NO, must initialize right here...
   }
b) class Y {
     var x = 99; // NO, only "local" vars
   }
c) doStuff() {
     var y = 99; // YES :)
   }
d) doStuff() {
     var var = 99; // YES!!!! var is a pseudo-type, not keyword... (backward compatibility)
   }

Q2) Given:
class X {
    static int MAX_VAL = 100;
    int value = 99;
    public void setVal(int x) {
      if (x <= MAX_VAL) value = x;
    }
  }
and:
    X a = new X();
    X b = new X();
    a.setVal(120);
    System.out.print(a.value + ", ");
    b.MAX_VAL = 150;
    a.setVal(140);
    System.out.println(a.value);

What is the result?
    A) 99, 99
    B) 120, 140
    C) 99, 140
    D) Compilation failure
    E) Exception at runtime
     */
  }

Q3) Given:
 class Y {
    static String sayHi() { return "Y-Hello"; }
    String sayHi2() { return "Y-Hello2"; }
  }
  class Z extends Y {
    static String sayHi() { return "Z-Hello"; }
    String sayHi2() { return "Z-Hello2"; }
  }
and:
    Y y = new Z();
    System.out.println(y.sayHi() + ", " +y.sayHi2());

What is the result?
    A) Y-Hello, Y-Hello2
    B) Y-Hello, Z-Hello2
    C) Z-Hello, Z-Hello2
    D) Z-Hello, Y-Hello2
    E) Compilation fails

Q4) Given:
 class Y {
    static String sayHi() { return "Y-Hello"; }
    String sayHi2() { return "Y-Hello2"; }
  }
  class Z extends Y {
    static String sayHi() { return "Z-Hello"; }
    String sayHi2() { return "Z-Hello2"; }
  }
and:
    System.out.println(Z.sayHi() + ", " + Y.sayHi2());

What is the result?
    A) Y-Hello, Y-Hello2
    B) Y-Hello, Z-Hello2
    C) Z-Hello, Z-Hello2
    D) Z-Hello, Y-Hello2
    E) Compilation fails

Q5) Given:
 class Y {
    int y = 99;
    static String sayHi() { return "Y-Hello "; }
  }
  class Z extends Y {
    int y = 100;
    static String sayHi() { return "Z-Hello " + new Z().y; }
  }
and:
    Z z = new Z();
    System.out.println(Y.sayHi() + ", " + z.sayHi());

What is the result?
    A) Y-Hello, Y-Hello
    B) Y-Hello, Z-Hello 99
    C) Y-Hello, Z-Hello 100
    D) Z-Hello 99, Z-Hello 100
    E) Compilation fails


Q6) Given:
  class Base {
    void doBaseStuff() { System.out.println("doBaseStuff"); }
  }

class Sub extends Base {
    void doBaseStuff() { System.out.println("doSubStuff"); }
    void doOtherStuff() { System.out.println("doOtherStuff"); }
  }

    Base b = new Sub();
    b.doOtherStuff();

What is the result?
    A) doSubStuff
    B) doOtherStuff
    C) doBaseStuff
    D) Exception at runtime
    E) Compilation failure

Q7) Given:
  class Base {
    void doBaseStuff() { System.out.println("doBaseStuff"); }
  }

class Sub extends Base {
    void doBaseStuff() { System.out.println("doSubStuff"); }
    void doOtherStuff() { System.out.println("doOtherStuff"); }
  }

    Base b = new Base();
    ((Sub)b).doOtherStuff();

What is the result?
    A) doSubStuff
    B) doOtherStuff
    C) doBaseStuff
    D) Exception at runtime
    E) Compilation failure

Q8) Given:
  class Base {
    void doBaseStuff() { System.out.println("doBaseStuff"); }
  }

class Sub extends Base {
    void doBaseStuff() { System.out.println("doSubStuff"); }
    void doOtherStuff() { System.out.println("doOtherStuff"); }
  }

    ((Sub)null).doOtherStuff();

What is the result?
    A) doSubStuff
    B) doOtherStuff
    C) doBaseStuff
    D) Exception at runtime
    E) Compilation failure

Q9) Given:
  class Base {
    void doBaseStuff() { System.out.println("doBaseStuff"); }
  }

class Sub {
    void doBaseStuff() { System.out.println("doSubStuff"); }
    void doOtherStuff() { System.out.println("doOtherStuff"); }
  }

    Base b = new Sub();
    ((Sub)b).doBaseStuff();

What is the result?
    A) doSubStuff
    B) doOtherStuff
    C) doBaseStuff
    D) Exception at runtime
    E) Compilation failure

Q10)
class Q22 {
    public int getValue() {return 1;}
}
which of these methods may individually be added
to a subclass of this class?

    A) public int getValue(int x) {return 1;}
    B) public String getValue() {return "Hello";}
    C) public String getValue(int x) {return "Hello";}
    D) A), B), and C)
    E) A), and C)

Q11)
  class Base {
    void doBaseStuff() {System.out.println("doBaseStuff");}
  }

  class Sub extends Base {
    void doBaseStuff() {System.out.println("doSubStuff");}
    void doOtherStuff() { System.out.println("doOtherStuff");}
  }

In the Base and Sub classes, which are true in isolation?
    A) doBaseStuff in Base can be marked public without causing errors
*   B) doBaseStuff in Base can be marked private without causing errors
*   C) doBaseStuff in Sub can be marked public without causing errors
*   D) doBaseStuff in Sub can be marked protected without causing errors
    E) doBaseStuff in Sub can be marked private without causing errors

Q12) Given:
class P {
  String name;
  P(String s) { this.name = s; } // line n1
}
class C extends P { // line n4
  @Override // line n2
  public String toString() { return "P with name " + name; }
}
and:
P p = new C(); // line n3
System.out.println(p);

What is the result:
A) Compilation fails at line n1
B) Compilation fails at line n2
C) Compilation fails at line n3
D) P with name null
E) Compilation fails at line n4

Q13) Given:
  StringBuilder sb1 = new StringBuilder("Hello");
    StringBuilder sb2 = sb1;
    sb1 = null;

Which is true?
    A) sb1 is unreferenced and eligible for GC
    B) sb1 and sb2 are unreferenced and eligible for GC
    C) No objects are eligible for GC

Q14) Given
    StringBuilder sb1 = new StringBuilder("Hello");
    StringBuilder sb2 = new StringBuilder("World");
    sb1 = null;
    sb2 = sb1;

Which is true?
    A) Object containing "Hello" is unreferenced and eligible for GC
    B) Object containing "World" is unreferenced and eligible for GC
    C) Object containing "Hello", and "World" are both unreferenced and eligible for GC
    D) No objects are eligible for GC

Q15) Given
Date getDate() {
  Date d = new Date(); // line n1
  Date e = new Date(); // line n2
  return d;
}
and:
Date f = getDate();
// line n3
Which is true at line n3?
A) One Date is eligible for GC
B) Two Date objects are eligible for GC
C) Three Date objects are eligible for GC
D) No Date objects are eligible for GC

Q16) Given:
public void q12A(StringBuilder x) {
    x.append(" world");
}

StringBuilder x = new StringBuilder("Hello");
q12A(x);
System.out.println(x);

What is the result?
    A) Hello
    B) Hello world
    C)  world
    D) An error

Q17) Given:
  public void q14A(Integer x) {
    x = x + 1;
  }

    Integer x = 99;
    q14A(x);
    System.out.println(x);

What is the result?
    A) 99
    B) 100
    C) An error

Q18) Given:
  public void q11A(int x) {
    x = x + 1;
  }

    int x = 99;
    q11A(x);
    System.out.println(x);

What is the result?
    A) 99
    B) 100
    C) An error

Q19) Given:
 public void q13A(int[] x) {
    x[0] = x[0] + 1;
  }
and:
    int x[] = {99};
    q13A(x);
    System.out.println(x[0]);

What is the result?
    A) 99
    B) 100
    C) An error

Q20) Given:
  class Base {
    void doBaseStuff() throws Exception {
      System.out.println("doBaseStuff");
    }
  }

  class Sub extends Base {
    void doBaseStuff() throws IOException {
      System.out.println("doSubStuff");
    }
  }

In the Base and Sub classes, which are true in isolation?
*   A) doBaseStuff in Base can be marked throws Exception without causing errors
*   B) doBaseStuff in Base can be marked throws RuntimeException without causing errors
    C) doBaseStuff in Sub can be marked throws Exception without causing errors
*   D) doBaseStuff in Sub can be marked throws RuntimeException without causing errors
*   E) if doBaseStuff in Base were marked throws Exception,
       then doBaseStuff in Sub can be marked throws IOException without causing errors

Q21) Which are legal (individually)?
  A) Object o = (String s) -> s.length() > 0;
  B) myListOfString.sort(s -> s.length() > 0);
* C) Predicate<String> ps = (var s) -> s.charAt(0) == 'X';
  D) Predicate<String> ps = String s -> s.length() > 2;
  E) Predicate<String> ps = s -> s.length();

Q22) Which are legal (individually)?
A)interface Odd {
  void odd();
  int total(int a, int b);
}
Odd o = (a, b) -> a + b;

B) abstract class Test {
  public abstract boolean test(Date d);
}
Test t = d -> d.getHours() > 6;

C) Predicate<String> ps = s -> { s.length() > 0; };

D) Supplier<String> ss = -> "Hello";

* E) UnaryOperator<String> uos = s -> s.toUpperCase();
